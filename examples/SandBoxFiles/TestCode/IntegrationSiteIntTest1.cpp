/*********************************************************************************************
 * Name		:  IntegrationSiteIntTest1.cpp
 *
 * Purpose	:
 *
 * Notes	:  This file was generated by CORINET on Wed Dec 20 17:25:16 2006 
 *
 * Info		:  http://www.corinet.org
 *
 * Copyright:
 *
 * Licensce	: This program is free software; you can redistribute it and/or modify
 * 			   it under the terms of the GNU General Public License as published by
 * 			   the Free Software Foundation; either version 2 of the License, or
 * 			   (at your option) any later version.
 *
 * 			   This program is distributed in the hope that it will be useful,
 * 			   but WITHOUT ANY WARRANTY; without even the implied warranty of
 * 			   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * 			   GNU General Public License in $CORINETROOT/licenses for more details.
 *
 **********************************************************************************************/


#include <Util/Factory.h>
#include <Model/Misc/Nodes.h>
#include <Model/Misc/Weights.h>
#include <Model/Initialisation.h>
#include <Model/Normalisation.h>
#include "IntegrationSiteIntTest1.h"

namespace CORINET {

CIntegrationSiteIntTest1::CIntegrationSiteIntTest1(size_t* s,double* params) : CIntegrationSiteImpl(s[0],s[1])
{
	/*parameters available in s:
		s[0]: number of inputs to integrationSite
		s[1]: number of nodes in block*/
	
	mMaxSteps = params[0];
}

CIntegrationSiteIntTest1::~CIntegrationSiteIntTest1()
{

}

void CIntegrationSiteIntTest1::Initialise()
{
	/*insertText your code here*/
	CIntegrationSiteImpl::Initialise(); /*always call at the end*/
}

void CIntegrationSiteIntTest1::Reset()
{
	/*you may delete this function here and in .h file if no *additional* action needs to be taken*/
	CIntegrationSiteImpl::Reset();
}

bool CIntegrationSiteIntTest1::Integrate(size_t nodes,HBlockOutput& y)
{
	/*"nodes" is for constructive versions*/
	/*insertText your code here*/
	/*return true when integration has converged*/
	return true;
}

bool CIntegrationSiteIntTest1::Learn(size_t nodes,HBlockOutput& y)
{
	/*"nodes" is for constructive versions*/
	/*insertText your code here*/
	/*return true when last possible node has learned and "nodes" should be increased*/
	(*pNorm)(mWeights);
	return false;
}

void CIntegrationSiteIntTest1::SetParam(size_t p,double v)
{
	switch (p) {
	case 0:
		mMaxSteps = v;
		break;
	}
}

double CIntegrationSiteIntTest1::GetParam(size_t p)
{
	double v = 0.0;
	switch (p) {
	case 0:
		v = mMaxSteps;
		break;
	}
	return v;
}

SynapseWrapper* CIntegrationSiteIntTest1::GetSynapses()
{
	/*derive and use your own SynapseWrapper class or call the base class implementation*/
	return CIntegrationSiteImpl::GetSynapses();
}

/*macro registers class name, see Factory.h for details*/
REGISTER_CLASS_1(CIntegrationSite,CIntegrationSiteIntTest1,intTest1)

} //end namespace CORINET

