<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE experiment[
	<!ENTITY typeDefaults SYSTEM "typeDefaults.xml">
	<!ENTITY trainSet1 SYSTEM "../../PatternSets/Categor2006/Fig9.xml">
	<!ENTITY trainSet2 SYSTEM "../../PatternSets/Categor2006/Fig10.xml">
	<!ENTITY testSet SYSTEM "../../PatternSets/Categor2006/Fig11.xml">
]>
<experiment xmlns="http://www.corinet.org/namespaces/CORINETSetup" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.corinet.org/namespaces/CORINETSetup ../../../code/xml/Setup/experimentSetup.xsd" 
definitionFile="./code/xml/Definition/languageDefinition.xml">
	<annotation>
		<documentation>
			Experiment from "A feedback model of perceptual learning and categorisation", Visual Cognition 13(2):129-65,2006.
		</documentation>
		<documentation>
			This file contains the exeperiments of figs. 9, 10 and 11.
		</documentation>
		<documentation>
			Technical issues: the network layout is different from previous experiments in this folder: there is no 
			category feedback going into the apical dendrite of the upper region, and no feedback between upper 
			and lower region. Instead, there is a source of attentional feedback going into the apical dendrite of the 
			lower region. When attentional feedback is targeted towards one or more specific nodes in the lower
			region (as in figs. 9d, 9e, 9f and 9g), this is not modelled with a task, but with an event handler
			that directly modifies the input to the network. This makes the task- and executionSections much simpler. 
			Furthermore, a modifyParam event handler is used to change the contrast of the last pattern of fig. 11. 
			----------------------------------------------------------------------------------------------------------------------------
			The first execution runs all experiments for figs. 9b, 9d, 9e, 9f and 9g. It is performed 100 times, 20 runs
			for each of the types of feedback. The second execution implements fig. 9c and is performed 20 times.
			It also generates the network responses pictured in fig. 11. The third execution runs the experiments
			of fig. 10.
			-----------------------------------------------------------------------------------------------------------------------------
			The bars and dots part of the input are constructed as in the previous experiments with task elements.
			The attentional input for attention to random features (fig. 9c) is also constructed with a task element.
			The attentional inputs for all other runs of the first execution are inserted into the network using event 
			handlers. These event handlers directly modify the input to the network input  at the time specified: 
			i.e. right after the input values to the network have been set. For the last pattern of fig. 11, the contrasts
			of bars and dots are different from the other figures. This is achieved by changing the value of the
			'on' parameter of the relevent tasks during the last iteration of the phase, just before the pattern is to be 
			generated. Immediately after the pattern is generated, the original value is restored.
			-----------------------------------------------------------------------------------------------------------------------------
			The results generated by this experiment are the weights for the basal integrationSite of the upper
			region at the end of each training phase. Also for one execution the output of the upper region
			in response to the testing patterns of fig. 11.
		</documentation>
	</annotation>
	<inputSection>
		<inputBlock id="PATTERN_INPUTS">
			<inputRange begin="0" end="28" step="1"/>
		</inputBlock>
		<inputBlock id="ATTENTION_INPUTS">
			<inputRange begin="29" end="57" step="1"/>
		</inputBlock>
	</inputSection>
	<networkSection>
		<network inputs="58" id="N0" type="discrete">
			<block nodes="29" id="B0">
				<integrationSite inputRefs="PATTERN_INPUTS" type="compInt1" id="D0">
					<initialisation type="diagonal"/>
					<normalisation type="normNone"/>
				</integrationSite>
				<integrationSite inputRefs="ATTENTION_INPUTS" type="addInt1" id="D1">
					<initialisation type="diagonal"/>
					<normalisation type="normNone"/>
				</integrationSite>
			</block>
			<block nodes="6" id="B1">
				<integrationSite inputRefs="B0" type="conj3" location="basal" id="D2"/>
			</block>
		</network>
	</networkSection>
	<taskSection>
		<task type="addExtraBits1" columns="20" id="BARS_FIG9" sampleMethod="withReplacement">
			<!--the bars part of the input pattern, training set of fig. 9 in paper-->
			<taskParams>
				<param name="numBits" value="1"/><!--one extra bar added to the patterns of fig. 9-->
			</taskParams>
			&trainSet1;
		</task>
		<task type="addExtraBits1" columns="20" id="BARS_FIG10" sampleMethod="withReplacement">
			<!--the bars part of the input pattern, training set of fig. 10 in paper-->
			<taskParams>
				<param name="numBits" value="1"/><!--one extra bar added to the patterns of fig. 10-->
			</taskParams>
			&trainSet2;
		</task>
		<task type="set1" columns="20" id="BARS_FIG11_1" sampleMethod="withReplacement">
			<!--the first four patterns of fig.11b, the same as in fig. 9 but not distorted with extra bar-->
			&trainSet1;
		</task>
		<task type="set1" columns="20" id="BARS_FIG11_2" sampleMethod="withReplacement">
			<!--the last three patterns of fig.11b-->
			&testSet;
		</task>
		<task type="set1" columns="9" id="DOTS">
			<!--the dots part of the input pattern, always present-->
			<patternSet columns="9">
				<p><r>1 1 1 1 1 1 1 1 1</r></p>
			</patternSet>
		</task>
		<task type="addExtraBits1" columns="29" id="RANDOM_FEATURE">
			<!--attentional feedback to single feature, chosen at random on each iteration-->
			<taskParams>
				<param name="numBits" value="1"/>
			</taskParams>
			<patternSet columns="29">
				<p><r>0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</r></p>
			</patternSet>
		</task>
	</taskSection>
	<executionSection xsi:type="engineV1">
		<!--training with patterns of fig. 9 with attentional signal inserted not with a task, but for some runs with an event handler-->
		<execution networks="N0" runs="100">
			<sequence>
				<part phase="train" iterations="200" tasks="BARS_FIG9 DOTS" id="TRAIN_9_BDEFG"/>
			</sequence>
		</execution>
		<!--training with patterns of fig. 9 with random attentional signal-->
		<execution networks="N0" runs="20">
			<sequence>
				<part phase="train" iterations="200" tasks="BARS_FIG9 DOTS RANDOM_FEATURE" id="TRAIN_9_C"/>
				<!--no attentional input during testing phases-->
				<part phase="test" iterations="4" tasks="BARS_FIG11_1 DOTS" id="TEST_11_1"/>
				<part phase="test" iterations="3" tasks="BARS_FIG11_2 DOTS" id="TEST_11_2"/>
			</sequence>
		</execution>
		<execution networks="N0" runs="20">
			<!--training with patterns of fig. 10 without any attentional signal-->
			<sequence>
				<part phase="train" iterations="200" tasks="BARS_FIG10 DOTS" id="TRAIN_10"/>
			</sequence>
		</execution>
	</executionSection>
	<defaultSection>
		&typeDefaults;
		<targetDefaults>
			<default targets="BARS_FIG9 BARS_FIG10 BARS_FIG11_1 BARS_FIG11_2 DOTS">
				<taskParams>
					<param name="on" value="0.75"/><!--strength of input-->
				</taskParams>
			</default>
			<default targets="RANDOM_FEATURE">
				<taskParams>
					<param name="on" value="0.75"/><!--strength of top-down feedback signal-->
				</taskParams>
			</default>
		</targetDefaults>
	</defaultSection>
	<eventSection xsi:type="eventModelV1">
		<report type="xml" location="./examples/Experiments/Categor2006/Exp4Results.xml" id="R1"/>
		<event eventTime="endPart" parts="TRAIN_9_BDEFG TRAIN_9_C TRAIN_10">
			<!--record weights of basal integrationSite of upper region at end of each run-->
			<record type="weights" targets="D2" report="R1"/>
		</event>
		<event eventTime="afterOutput" parts="TEST_11_1 TEST_11_2">
			<!--record output of upper region at each integration step -->
			<record type="blockOutput" targets="B1" report="R1"/>
		</event>
		<event eventTime="afterSetInput" parts="TRAIN_9_BDEFG">
			<!--this event sets the attentional input for the left bar, as in fig. 9d-->
			<condition variable="run" type="gteq" values="20"/>
			<condition variable="run" type="lt" values="40"/>
			<modify type="integrationInput" targets="D1" inputIndices="9">
				<operation type="assign" values="0.75"/>
			</modify>
		</event>
		<event eventTime="afterSetInput" parts="TRAIN_9_BDEFG">
			<!--this event sets the attentional input for the right bar, as in fig. 9e-->
			<condition variable="run" type="gteq" values="40"/>
			<condition variable="run" type="lt" values="60"/>
			<modify type="integrationInput" targets="D1" inputIndices="11">
				<operation type="assign" values="0.75"/>
			</modify>
		</event>
		<event eventTime="afterSetInput" parts="TRAIN_9_BDEFG">
			<!--this event sets the attentional input for the right bar, as in fig. 9f-->
			<condition variable="run" type="gteq" values="60"/>
			<condition variable="run" type="lt" values="80"/>
			<modify type="integrationInput" targets="D1" inputIndices="10">
				<operation type="assign" values="0.75"/>
			</modify>
		</event>
		<event eventTime="afterSetInput" parts="TRAIN_9_BDEFG">
			<!--this event sets the attentional input for the all bars of the prototype, as in fig. 9g-->
			<condition variable="run" type="gteq" values="80"/>
			<modify type="integrationInput" targets="D1" inputIndices="3 10 12 17">
				<operation type="assign" values="0.75"/>
			</modify>
		</event>
		<event eventTime="beforeGenerate" parts="TEST_11_2">
			<!--this event changes the contrast of the 7th pattern of fig. 11b-->
			<condition variable="iteration " type="equals" values="2"/>
			<modifyParam type="task" paramName="on" targets="BARS_FIG11_2 DOTS">
				<operation type="assign" values="0.5"></operation>
			</modifyParam>
		</event>
		<event eventTime="afterGenerate" parts="TEST_11_2">
			<!--this event changes the contrast back to the original value-->
			<condition variable="iteration " type="equals" values="2"/>
			<modifyParam type="task" paramName="on" targets="BARS_FIG11_2 DOTS">
				<operation type="assign" values="0.75"></operation>
			</modifyParam>
		</event>
	</eventSection>
</experiment>
