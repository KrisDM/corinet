<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE experiment[
	<!ENTITY typeDefaults SYSTEM "typeDefaults.xml">
	<!ENTITY trainSet SYSTEM "../../PatternSets/Categor2006/Fig3.xml">
	<!ENTITY testSet1 SYSTEM "../../PatternSets/Categor2006/Fig5.xml">
	<!ENTITY testSet2 SYSTEM "../../PatternSets/Categor2006/Fig6.xml">
]>
<experiment xmlns="http://www.corinet.org/namespaces/CORINETSetup" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.corinet.org/namespaces/CORINETSetup ../../../code/xml/Setup/experimentSetup.xsd" 
definitionFile="./code/xml/Definition/languageDefinition.xml">
	<annotation>
		<documentation>
			Experiment from "A feedback model of perceptual learning and categorisation", Visual Cognition 13(2):129-65,2006.
		</documentation>
		<documentation>
			This file simulates the experiments of figs. 4, 5 and 6.
		</documentation>
		<documentation>
			Technical issues: network with 2 regions, one block per region, two integrationSites per block.
			Feedforward input goes into basal dendrites, feedback or category input goes into apical dendrites.
			Most parameters described in the appendix of the paper are supplied in the 'typesDefault.xml' file. 
			That file, as well as some of the patternSets, are iinlcuded using entity declarations at the top of this page. 
			The meaning of types and parameters is explained in the 'languageDefaults.xml' file.
			----------------------------------------------------------------------------------------------------------------------------
			The first execution simulates the network response for an untrained network; this is always the same 
			so needs to be performed only once. The second execution simulates categorisation-by-row, the third 
			categorisation-by-column. Each of these is performed 20 times (see 'runs' in execution elements). 
			-----------------------------------------------------------------------------------------------------------------------------
			The most complex aspect of this setup file is how input to the network is constructed from separate 
			tasks generating the bars, the dots and the category inputs respectively. Somewhat annoying in this 
			approach is that the seeds for the bars and category tasks need to be the same, otherwise the patterns
			are not combined correctly during the randomised training phase. 
			A task is seeded at the start of each execution, not at the start of each run; this means that each of the 
			20 runs will use a different randomised order of patterns during training, but that overall the 2 executions 
			will use the same order. 
			Another way of providing the input patterns would be to construct 2 separate patternSets, each
			with the entire 35 inputs; one for categorisation-by-row, and one for categorisation-by-column.
			It would be simpler in setup, but means maintaining overlapping information in the two patternSets.
			-----------------------------------------------------------------------------------------------------------------------------
			The results generated by this experiment are the weights for the basal integrationSite of the upper
			region at the end of each training phase (so 40 sets of weights, 20 for each execution); and the 
			detailed output of both regions during testing with the patterns of fig. 5 and 6 of the paper. 'Detailed'
			means recorded during all integration steps until competition converges, not only at the end 
			of the competition. These output data allow to plot the graphs of fig. 5, but please note that the output values
			are generated as per eq. 6 and 8 of the paper (see page 17), and that the smoothing with previous activity
			(see unnumbered equation using tauY) is not performed internally; it is only used for plotting response profiles.
			If an integration is stopped because the competition has converged, then this means that subsequent 
			integration steps would give the same results (except for the small effect of noise as generated by eq. 8). 
		</documentation>
	</annotation>
	<inputSection>
		<inputBlock id="PATTERN_INPUTS">
			<inputRange begin="0" end="28" step="1"/>
		</inputBlock>
		<inputBlock id="CATEGORY_INPUTS">
			<inputIndices>29 30 31 32 33 34</inputIndices>
		</inputBlock>
	</inputSection>
	<networkSection>
		<network inputs="35" id="N0" type="discrete">
			<block nodes="29" id="B0">
				<integrationSite inputRefs="PATTERN_INPUTS" type="compInt1" location="basal" id="D0">
					<initialisation type="diagonal"/>
					<normalisation type="normNone"/>
				</integrationSite>
				<integrationSite inputRefs="B1" type="disj1" location="apical" id="D1"/>
			</block>
			<block nodes="6" id="B1">
				<integrationSite inputRefs="B0" type="conj3" location="basal" id="D2"/>
				<integrationSite inputRefs="CATEGORY_INPUTS" type="disj1" location="apical" id="D3"/>
			</block>
		</network>
	</networkSection>
	<taskSection>
		<task type="addExtraBits1" columns="20" id="BARS_FIG3" seed="2279011" sampleMethod="withReplacement">
			<!--the bars part of the input pattern, training set of fig. 3 in paper-->
			<!--for training with category input, 'seed' needs to be the same to ensure correct combination of pattern and category-->
			<!--if you need a different set of results, change the seed here and in task CATEGORY_ROWS and CATEGORY_COLUMNS-->
			<taskParams>
				<param name="numBits" value="1"/><!--one extra bar added to the patterns of fig. 3-->
			</taskParams>
			&trainSet;
		</task>
		<task type="set1" columns="9" id="DOTS">
			<!--the dots part of the input pattern, always present-->
			<patternSet columns="9">
				<p><r>1 1 1 1 1 1 1 1 1</r></p>
			</patternSet>
		</task>
		<task type="set1" columns="6" id="CATEGORY_ROWS" seed="2279011" sampleMethod="withReplacement">
			<!--category input grouping patterns of task "BARS_FIG3" by row (see fig 3)-->
			<!--seed needs to be the same as seed of task "BARS_FIG3" to ensure correct combination of inputs-->
			<patternSet columns="6">
				<p><r>1 0 0 0 0 0</r></p>
				<p><r>1 0 0 0 0 0</r></p>
				<p><r>0 1 0 0 0 0</r></p>
				<p><r>0 1 0 0 0 0</r></p>
			</patternSet>
		</task>
		<task type="set1" columns="6" id="CATEGORY_COLUMNS" seed="2279011" sampleMethod="withReplacement">
			<!--category input grouping patterns of task "BARS_FIG3" by column (see fig 3)-->
			<!--seed needs to be the same as seed of task "BARS_FIG3" to ensure correct combination of inputs-->
			<patternSet columns="6">
				<p><r>1 0 0 0 0 0</r></p>
				<p><r>0 1 0 0 0 0</r></p>
				<p><r>1 0 0 0 0 0</r></p>
				<p><r>0 1 0 0 0 0</r></p>
			</patternSet>
		</task>
		<task type="set1" columns="20" id="BARS_FIG5">
			<!--the bars of the single test pattern of fig. 5-->
			&testSet1;
		</task>
		<task type="set1" columns="20" id="BARS_FIG6">
			<!--the bars of the five test patterns of fig. 6-->
			&testSet2;
		</task>
	</taskSection>
	<executionSection xsi:type="engineV1">
		<!--testing network response before training, generating data for fig. 5c, always the same so performed once-->
		<execution networks="N0" runs="1">
			<sequence>
				<!--bars inserted from inputs 0 to 19, dots from 20 to 28, category inputs remain 0-->
				<part phase="test" iterations="1" tasks="BARS_FIG5 DOTS" id="BEFORE_TRAINING"/>
			</sequence>
		</execution>
		<!--training with patterns of fig.3 grouped by row, testing with patterns of figs. 5 and 6-->
		<execution networks="N0" runs="20">
			<sequence>
				<!--bars inserted from inputs 0 to 19, dots from 20 to 28, and by-row category from 29 to 34-->
				<part phase="train" iterations="200" tasks="BARS_FIG3 DOTS CATEGORY_ROWS" id="ROWS_TRAIN"/>
				<!--bars and dots inserted as above, category inputs remain 0-->
				<part phase="test" iterations="1" tasks="BARS_FIG5 DOTS" id="ROWS_TEST1"/>
				<!--bars and dots inserted as above, category inputs remain 0-->
				<part phase="test" iterations="5" tasks="BARS_FIG6 DOTS" id="ROWS_TEST2"/>
			</sequence>
		</execution>
		<!--training with patterns of fig.3 grouped by column, testing with pattern of figs. 5 only-->
		<execution networks="N0" runs="20">
			<sequence>
				<!--bars inserted from inputs 0 to 19, dots from 20 to 28, and by-column category from 29 to 34-->
				<part phase="train" iterations="200" tasks="BARS_FIG3 DOTS CATEGORY_COLUMNS" id="COLUMNS_TRAIN"/>
				<!--bars and dots inserted as above, category inputs remain 0-->
				<part phase="test" iterations="1" tasks="BARS_FIG5 DOTS" id="COLUMNS_TEST"/>
			</sequence>
		</execution>
	</executionSection>
	<defaultSection>
		&typeDefaults;
		<targetDefaults>
			<default targets="BARS_FIG3 BARS_FIG5 BARS_FIG6 DOTS">
				<taskParams>
					<param name="on" value="0.75"/><!--strength of input-->
				</taskParams>
			</default>
			<default targets="CATEGORY_COLUMNS CATEGORY_ROWS">
				<taskParams>
					<param name="on" value="0.75"/><!--strength of category feedback signal-->
				</taskParams>
			</default>
		</targetDefaults>
	</defaultSection>
	<eventSection xsi:type="eventModelV1">
		<report type="xml" location="./examples/Experiments/Categor2006/Exp1Results.xml" id="R1"/>
		<event eventTime="endPart" parts="ROWS_TRAIN COLUMNS_TRAIN">
			<!--record weights of basal integrationSite of upper region at end of each run - data for fig. 4-->
			<record type="weights" targets="D2" report="R1"/>
		</event>
		<event eventTime="afterOutput" parts="BEFORE_TRAINING ROWS_TEST1 ROWS_TEST2 COLUMNS_TEST">
			<!--record detailed output of both regions during the entire competition process in each iteration of the test phases - data for fig. 5 and 6-->
			<record type="blockOutput" targets="B0 B1" report="R1"/>
		</event>
	</eventSection>
</experiment>
