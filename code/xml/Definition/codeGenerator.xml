<?xml version="1.0" encoding="UTF-8"?>
<codeGenerator xmlns="http://www.corinet.org/namespaces/CORINETDefinition/Generator" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.corinet.org/namespaces/CORINETDefinition/Generator codeGenerator.xsd">
	<annotation>
		<documentation>
			Templates used for generating C++ code; please do not modify. 
		</documentation>
	</annotation>
	<intro>
		<line>/*********************************************************************************************</line>
		<line> * Name<tab/><tab/>:  <insertText type="fileName"/></line>
		<line> *</line>
		<line> * Purpose<tab/>:</line>
		<line> *</line>
		<line> * Notes<tab/>:  This file was generated by corinet on <insertText type="date"/></line>
		<line> *</line>
		<line> * Info<tab/><tab/>:  http://www.corinet.org</line>
		<line> *</line>
		<line> * Copyright:</line>
		<line> *</line>
		<line> * License<tab/>:  This program is free software; you can redistribute it and/or modify</line>
		<line> * <tab/><tab/><tab/>   it under the terms of the GNU General Public License as published by</line>
		<line> * <tab/><tab/><tab/>   the Free Software Foundation; either version 2 of the License, or</line>
		<line> * <tab/><tab/><tab/>   (at your option) any later version.</line>
		<line> *</line>
		<line> * <tab/><tab/><tab/>   This program is distributed in the hope that it will be useful,</line>
		<line> * <tab/><tab/><tab/>   but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
		<line> * <tab/><tab/><tab/>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</line>
		<line> * <tab/><tab/><tab/>   GNU General Public License in $CORINETROOT/licenses for more details.</line>
		<line> *</line>
		<line> **********************************************************************************************/</line>
		<line></line>
	</intro>
	<randGen>
		<hFile>
			<line>#ifndef CORINET_RANDDOUBLE<insertText type="typeNameUpper"/></line>
			<line>#define CORINET_RANDDOUBLE<insertText type="typeNameUpper"/></line>
			<line></line>
			<line>#include &lt;Common/Impl/RandDoubleImpl.h&gt;</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>class Rand<insertText type="typeName"/> : public RandDoubleImpl {</line>
			<line><tab/><insertText type="params"/></line>
			<line>public:</line>
			<line><tab/>Rand<insertText type="typeName"/>(size_t*,double*);</line>
			<line><tab/>virtual ~Rand<insertText type="typeName"/>();</line>
			<line><tab/>double operator()();</line>
			<line><tab/>void SetParam(size_t,double);</line>
			<line><tab/>double GetParam(size_t);</line>
			<line>};</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
			<line>#endif //CORINET_RANDDOUBLE<insertText type="typeNameUpper"/></line>
			<line></line>
		</hFile>
		<cppFile>
			<line></line>
			<line>#include &lt;Util/Factory.h&gt;</line>
			<line>#include "<insertText type="fileName"/>"</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>Rand<insertText type="typeName"/>::Rand<insertText type="typeName"/>(size_t* s,double* params)</line>
			<line>{</line>
			<line><tab/>/*parameters available in s: none*/</line>
			<line><insertText type="params"/></line>
			<line>}</line>
			<line></line>
			<line>Rand<insertText type="typeName"/>::~Rand<insertText type="typeName"/>()</line>
			<line>{</line>
			<line></line>
			<line>}</line>
			<line></line>
			<line>double Rand<insertText type="typeName"/>::operator()()</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line><tab/>return 0.0;</line>
			<line>}</line>
			<line></line>
			<line>void Rand<insertText type="typeName"/>::SetParam(size_t p,double v)</line>
			<line>{</line>
			<line><insertText type="setParams"/></line>
			<line>}</line>
			<line></line>
			<line>double Rand<insertText type="typeName"/>::GetParam(size_t p)</line>
			<line>{</line>
			<line><insertText type="getParams"/></line>
			<line>}</line>
			<line></line>
			<line>/*macro registers class name, see Factory.h for details*/</line>
			<line>REGISTER_CLASS_1(RandDouble,Rand<insertText type="typeName"/>,<insertText type="key"/>)</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
		</cppFile>
	</randGen>
	<attenuation>
		<hFile>
			<line>#ifndef CORINET_ATTENUATION<insertText type="typeNameUpper"/></line>
			<line>#define CORINET_ATTENUATION<insertText type="typeNameUpper"/></line>
			<line></line>
			<line>#include &lt;Common/Impl/AttenuationImpl.h&gt;</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>class FAttenuation<insertText type="typeName"/> : public FAttenuationImpl {</line>
			<line><tab/><insertText type="params"/></line>
			<line>public:</line>
			<line><tab/>FAttenuation<insertText type="typeName"/>(size_t*,double*);</line>
			<line><tab/>virtual ~FAttenuation<insertText type="typeName"/>();</line>
			<line><tab/>void Initialise();</line>
			<line><tab/>void Reset();</line>
			<line><tab/>void operator()(SubArrayIterator&amp;);</line>
			<line><tab/>void SetParam(size_t,double);</line>
			<line><tab/>double GetParam(size_t);</line>
			<line>};</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
			<line>#endif //CORINET_ATTENUATION<insertText type="typeNameUpper"/></line>
			<line></line>
		</hFile>
		<cppFile>
			<line></line>
			<line>#include &lt;Util/Factory.h&gt;</line>
			<line>#include &lt;Util/Iterator.h&gt;</line>
			<line>#include "<insertText type="fileName"/>"</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>FAttenuation<insertText type="typeName"/>::FAttenuation<insertText type="typeName"/>(size_t* s,double* params)</line>
			<line>{</line>
			<line><tab/>/*parameters available in s:</line>
			<line><tab/><tab/>s[0]: number of nodes in block or size of pattern*/</line>
			<line><insertText type="params"/></line>
			<line>}</line>
			<line></line>
			<line>FAttenuation<insertText type="typeName"/>::~FAttenuation<insertText type="typeName"/>()</line>
			<line>{</line>
			<line></line>
			<line>}</line>
			<line></line>
			<line>void FAttenuation<insertText type="typeName"/>::Initialise()</line>
			<line>{</line>
			<line><tab/>/*you may delete this function here and in .h file if no action needs to be taken*/</line>
			<line>}</line>
			<line></line>
			<line>void FAttenuation<insertText type="typeName"/>::Reset()</line>
			<line>{</line>
			<line><tab/>/*you may delete this function here and in .h file if no action needs to be taken*/</line>
			<line>}</line>
			<line></line>
			<line>void FAttenuation<insertText type="typeName"/>::operator()(SubArrayIterator&amp; y)</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line>}</line>
			<line></line>
			<line>void FAttenuation<insertText type="typeName"/>::SetParam(size_t p,double v)</line>
			<line>{</line>
			<line><insertText type="setParams"/></line>
			<line>}</line>
			<line></line>
			<line>double FAttenuation<insertText type="typeName"/>::GetParam(size_t p)</line>
			<line>{</line>
			<line><insertText type="getParams"/></line>
			<line>}</line>
			<line></line>
			<line>/*macro registers class name, see Factory.h for details*/</line>
			<line>REGISTER_CLASS_1(FAttenuation,FAttenuation<insertText type="typeName"/>,<insertText type="key"/>)</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
		</cppFile>
	</attenuation>
	<noiseFunction>
		<hFile>
			<line>#ifndef CORINET_NOISEFUNCTION<insertText type="typeNameUpper"/></line>
			<line>#define CORINET_NOISEFUNCTION<insertText type="typeNameUpper"/></line>
			<line></line>
			<line>#include &lt;Common/Impl/NoiseFunctionImpl.h&gt;</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>class FNoiseFunction<insertText type="typeName"/> : public FNoiseFunctionImpl {</line>
			<line><tab/><insertText type="params"/></line>
			<line>public:</line>
			<line><tab/>FNoiseFunction<insertText type="typeName"/>(size_t*,double*);</line>
			<line><tab/>virtual ~FNoiseFunction<insertText type="typeName"/>();</line>
			<line><tab/>void Initialise();</line>
			<line><tab/>void Reset();</line>
			<line><tab/>void operator()(SubArrayIterator&amp;);</line>
			<line><tab/>void SetParam(size_t,double);</line>
			<line><tab/>double GetParam(size_t);</line>
			<line>};</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
			<line>#endif //CORINET_NOISEFUNCTION<insertText type="typeNameUpper"/></line>
			<line></line>
		</hFile>
		<cppFile>
			<line></line>
			<line>#include &lt;Util/Factory.h&gt;</line>
			<line>#include &lt;Util/Iterator.h&gt;</line>
			<line>#include "<insertText type="fileName"/>"</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>FNoiseFunction<insertText type="typeName"/>::FNoiseFunction<insertText type="typeName"/>(size_t* s,double* params)</line>
			<line>{</line>
			<line><tab/>/*parameters available in s:</line>
			<line><tab/><tab/>s[0]: number of nodes in block or size of pattern*/</line>
			<line><insertText type="params"/></line>
			<line>}</line>
			<line></line>
			<line>FNoiseFunction<insertText type="typeName"/>::~FNoiseFunction<insertText type="typeName"/>()</line>
			<line>{</line>
			<line></line>
			<line>}</line>
			<line></line>
			<line>void FNoiseFunction<insertText type="typeName"/>::Initialise()</line>
			<line>{</line>
			<line><tab/>/*you may delete this function here and in .h file if no action needs to be taken*/</line>
			<line>}</line>
			<line></line>
			<line>void FNoiseFunction<insertText type="typeName"/>::Reset()</line>
			<line>{</line>
			<line><tab/>/*you may delete this function here and in .h file if no action needs to be taken*/</line>
			<line>}</line>
			<line></line>
			<line>void FNoiseFunction<insertText type="typeName"/>::operator()(SubArrayIterator&amp; y)</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line>}</line>
			<line></line>
			<line>void FNoiseFunction<insertText type="typeName"/>::SetParam(size_t p,double v)</line>
			<line>{</line>
			<line><insertText type="setParams"/></line>
			<line>}</line>
			<line></line>
			<line>double FNoiseFunction<insertText type="typeName"/>::GetParam(size_t p)</line>
			<line>{</line>
			<line><insertText type="getParams"/></line>
			<line>}</line>
			<line></line>
			<line>/*macro registers class name, see Factory.h for details*/</line>
			<line>REGISTER_CLASS_1(FNoiseFunction,FNoiseFunction<insertText type="typeName"/>,<insertText type="key"/>)</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
		</cppFile>
	</noiseFunction>
	<initialisation>
		<hFile>
			<line>#ifndef CORINET_INITIALISATION<insertText type="typeNameUpper"/></line>
			<line>#define CORINET_INITIALISATION<insertText type="typeNameUpper"/></line>
			<line></line>
			<line>#include &lt;Model/Impl/InitialisationImpl.h&gt;</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>class FInitialisation<insertText type="typeName"/> : public FInitialisationImpl {</line>
			<line><tab/><insertText type="params"/></line>
			<line>public:</line>
			<line><tab/>FInitialisation<insertText type="typeName"/>(size_t*,double*);</line>
			<line><tab/>virtual ~FInitialisation<insertText type="typeName"/>();</line>
			<line><tab/>void Initialise();</line>
			<line><tab/>void Reset();</line>
			<line><tab/>void operator()(HWeights&amp;);</line>
			<line><tab/>void SetParam(size_t,double);</line>
			<line><tab/>double GetParam(size_t);</line>
			<line>};</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
			<line>#endif //CORINET_INITIALISATION<insertText type="typeNameUpper"/></line>
			<line></line>
		</hFile>
		<cppFile>
			<line></line>
			<line>#include &lt;Util/Factory.h&gt;</line>
			<line>#include &lt;Model/Misc/Weights.h&gt;</line>
			<line>#include &lt;Common/RandGen.h&gt;</line>
			<line>#include "<insertText type="fileName"/>"</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>FInitialisation<insertText type="typeName"/>::FInitialisation<insertText type="typeName"/>(size_t* s,double* params)</line>
			<line>{</line>
			<line><tab/>/*parameters available in s:</line>
			<line><tab/><tab/>s[0]: number of inputs to integrationSite</line>
			<line><tab/><tab/>s[1]: number of nodes in block*/</line>
			<line><insertText type="params"/></line>
			<line>}</line>
			<line></line>
			<line>FInitialisation<insertText type="typeName"/>::~FInitialisation<insertText type="typeName"/>()</line>
			<line>{</line>
			<line></line>
			<line>}</line>
			<line></line>
			<line>void FInitialisation<insertText type="typeName"/>::Initialise()</line>
			<line>{</line>
			<line><tab/>/*you may delete this function here and in .h file if no action needs to be taken*/</line>
			<line>}</line>
			<line></line>
			<line>void FInitialisation<insertText type="typeName"/>::Reset()</line>
			<line>{</line>
			<line><tab/>/*you may delete this function here and in .h file if no action needs to be taken*/</line>
			<line>}</line>
			<line></line>
			<line>void FInitialisation<insertText type="typeName"/>::operator()(HWeights&amp; w)</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line>}</line>
			<line></line>
			<line>void FInitialisation<insertText type="typeName"/>::SetParam(size_t p,double v)</line>
			<line>{</line>
			<line><insertText type="setParams"/></line>
			<line>}</line>
			<line></line>
			<line>double FInitialisation<insertText type="typeName"/>::GetParam(size_t p)</line>
			<line>{</line>
			<line><insertText type="getParams"/></line>
			<line>}</line>
			<line></line>
			<line>/*macro registers class name, see Factory.h for details*/</line>
			<line>REGISTER_CLASS_1(FInitialisation,FInitialisation<insertText type="typeName"/>,<insertText type="key"/>)</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
		</cppFile>
	</initialisation>
	<normalisation>
		<hFile>
			<line>#ifndef CORINET_NORMALISATION<insertText type="typeNameUpper"/></line>
			<line>#define CORINET_NORMALISATION<insertText type="typeNameUpper"/></line>
			<line></line>
			<line>#include &lt;Model/Impl/NormalisationImpl.h&gt;</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>class FNormalisation<insertText type="typeName"/> : public FNormalisationImpl {</line>
			<line><tab/><insertText type="params"/></line>
			<line>public:</line>
			<line><tab/>FNormalisation<insertText type="typeName"/>(size_t*,double*);</line>
			<line><tab/>virtual ~FNormalisation<insertText type="typeName"/>();</line>
			<line><tab/>void Initialise();</line>
			<line><tab/>void Reset();</line>
			<line><tab/>void operator()(HWeights&amp;);</line>
			<line><tab/>void SetParam(size_t,double);</line>
			<line><tab/>double GetParam(size_t);</line>
			<line>};</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
			<line>#endif //CORINET_NORMALISATION<insertText type="typeNameUpper"/></line>
			<line></line>
		</hFile>
		<cppFile>
			<line></line>
			<line>#include &lt;Util/Factory.h&gt;</line>
			<line>#include &lt;Model/Misc/Weights.h&gt;</line>
			<line>#include "<insertText type="fileName"/>"</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>FNormalisation<insertText type="typeName"/>::FNormalisation<insertText type="typeName"/>(size_t* s,double* params)</line>
			<line>{</line>
			<line><tab/>/*parameters available in s:</line>
			<line><tab/><tab/>s[0]: number of inputs to integrationSite</line>
			<line><tab/><tab/>s[1]: number of nodes in block*/</line>
			<line><insertText type="params"/></line>
			<line>}</line>
			<line></line>
			<line>FNormalisation<insertText type="typeName"/>::~FNormalisation<insertText type="typeName"/>()</line>
			<line>{</line>
			<line></line>
			<line>}</line>
			<line></line>
			<line>void FNormalisation<insertText type="typeName"/>::Initialise()</line>
			<line>{</line>
			<line><tab/>/*you may delete this function here and in .h file if no action needs to be taken*/</line>
			<line>}</line>
			<line></line>
			<line>void FNormalisation<insertText type="typeName"/>::Reset()</line>
			<line>{</line>
			<line><tab/>/*you may delete this function here and in .h file if no action needs to be taken*/</line>
			<line>}</line>
			<line></line>
			<line>void FNormalisation<insertText type="typeName"/>::operator()(HWeights&amp; w)</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line>}</line>
			<line></line>
			<line>void FNormalisation<insertText type="typeName"/>::SetParam(size_t p,double v)</line>
			<line>{</line>
			<line><insertText type="setParams"/></line>
			<line>}</line>
			<line></line>
			<line>double FNormalisation<insertText type="typeName"/>::GetParam(size_t p)</line>
			<line>{</line>
			<line><insertText type="getParams"/></line>
			<line>}</line>
			<line></line>
			<line>/*macro registers class name, see Factory.h for details*/</line>
			<line>REGISTER_CLASS_1(FNormalisation,FNormalisation<insertText type="typeName"/>,<insertText type="key"/>)</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
		</cppFile>
	</normalisation>
	<outputFunction>
		<hFile>
			<line>#ifndef CORINET_OUTPUTFUNCTION<insertText type="typeNameUpper"/></line>
			<line>#define CORINET_OUTPUTFUNCTION<insertText type="typeNameUpper"/></line>
			<line></line>
			<line>#include &lt;Model/Impl/OutputFunctionImpl.h&gt;</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>class FOutputFunction<insertText type="typeName"/> : public FOutputFunctionImpl {</line>
			<line><tab/><insertText type="params"/></line>
			<line>public:</line>
			<line><tab/>FOutputFunction<insertText type="typeName"/>(size_t*,double*);</line>
			<line><tab/>virtual ~FOutputFunction<insertText type="typeName"/>();</line>
			<line><tab/>void Initialise();</line>
			<line><tab/>void Reset();</line>
			<line><tab/>void operator()(const std::vector&lt;SubArrayIteratorConst*&gt;&amp;,HBlockOutput&amp;);</line>
			<line><tab/>void SetParam(size_t,double);</line>
			<line><tab/>double GetParam(size_t);</line>
			<line>};</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
			<line>#endif //CORINET_OUTPUTFUNCTION<insertText type="typeNameUpper"/></line>
			<line></line>
		</hFile>
		<cppFile>
			<line></line>
			<line>#include &lt;Util/Factory.h&gt;</line>
			<line>#include &lt;Model/Misc/Nodes.h&gt;</line>
			<line>#include &lt;Common/Attenuation.h&gt;</line>
			<line>#include &lt;Common/NoiseFunction.h&gt;</line>
			<line>#include "<insertText type="fileName"/>"</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>FOutputFunction<insertText type="typeName"/>::FOutputFunction<insertText type="typeName"/>(size_t* s,double* params)</line>
			<line>{</line>
			<line><tab/>/*parameters available in s:</line>
			<line><tab/><tab/>s[0]: number of nodes in block*/</line>
			<line><insertText type="params"/></line>
			<line><tab/>pAttenuation = 0;</line>
			<line><tab/>pNoise = 0;</line>
			<line>}</line>
			<line></line>
			<line>FOutputFunction<insertText type="typeName"/>::~FOutputFunction<insertText type="typeName"/>()</line>
			<line>{</line>
			<line></line>
			<line>}</line>
			<line></line>
			<line>void FOutputFunction<insertText type="typeName"/>::Initialise()</line>
			<line>{</line>
			<line><tab/>/*you may delete this function here and in .h file if no *additional* action needs to be taken*/</line>
			<line><tab/>FOutputFunctionImpl::Initialise();</line>
			<line>}</line>
			<line></line>
			<line>void FOutputFunction<insertText type="typeName"/>::Reset()</line>
			<line>{</line>
			<line><tab/>/*you may delete this function here and in .h file if no *additional* action needs to be taken*/</line>
			<line><tab/>FOutputFunctionImpl::Reset();</line>
			<line>}</line>
			<line></line>
			<line>void FOutputFunction<insertText type="typeName"/>::operator()(const std::vector&lt;SubArrayIteratorConst*&gt;&amp; intvals,HBlockOutput&amp; y)</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line><tab/>if (pAttenuation) (*pAttenuation)(y);</line>
			<line><tab/>if (pNoise) (*pNoise)(y);</line>
			<line>}</line>
			<line></line>
			<line>void FOutputFunction<insertText type="typeName"/>::SetParam(size_t p,double v)</line>
			<line>{</line>
			<line><insertText type="setParams"/></line>
			<line>}</line>
			<line></line>
			<line>double FOutputFunction<insertText type="typeName"/>::GetParam(size_t p)</line>
			<line>{</line>
			<line><insertText type="getParams"/></line>
			<line>}</line>
			<line></line>
			<line>/*macro registers class name, see Factory.h for details*/</line>
			<line>REGISTER_CLASS_1(FOutputFunction,FOutputFunction<insertText type="typeName"/>,<insertText type="key"/>)</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
		</cppFile>
	</outputFunction>
	<integrationSite>
		<hFile>
			<line>#ifndef CORINET_INTEGRATIONSITE<insertText type="typeNameUpper"/></line>
			<line>#define CORINET_INTEGRATIONSITE<insertText type="typeNameUpper"/></line>
			<line></line>
			<line>#include &lt;Model/Impl/IntegrationSiteImpl.h&gt;</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>class CIntegrationSite<insertText type="typeName"/> : public CIntegrationSiteImpl {</line>
			<line><tab/><insertText type="params"/></line>
			<line>public:</line>
			<line><tab/>CIntegrationSite<insertText type="typeName"/>(size_t*,double*);</line>
			<line><tab/>virtual ~CIntegrationSite<insertText type="typeName"/>();</line>
			<line><tab/>void Initialise();</line>
			<line><tab/>void Reset();</line>
			<line><tab/>bool Integrate(size_t,HBlockOutput&amp;);</line>
			<line><tab/>bool Learn(size_t,HBlockOutput&amp;);</line>
			<line><tab/>void SetParam(size_t,double);</line>
			<line><tab/>double GetParam(size_t);</line>
			<line><tab/>SynapseWrapper* GetSynapses();</line>
			<line>};</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
			<line>#endif //CORINET_INTEGRATIONSITE<insertText type="typeNameUpper"/></line>
			<line></line>
		</hFile>
		<cppFile>
			<line></line>
			<line>#include &lt;Util/Factory.h&gt;</line>
			<line>#include &lt;Model/Misc/Nodes.h&gt;</line>
			<line>#include &lt;Model/Misc/Weights.h&gt;</line>
			<line>#include &lt;Model/Initialisation.h&gt;</line>
			<line>#include &lt;Model/Normalisation.h&gt;</line>
			<line>#include "<insertText type="fileName"/>"</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>CIntegrationSite<insertText type="typeName"/>::CIntegrationSite<insertText type="typeName"/>(size_t* s,double* params) : CIntegrationSiteImpl(s[0],s[1])</line>
			<line>{</line>
			<line><tab/>/*parameters available in s:</line>
			<line><tab/><tab/>s[0]: number of inputs to integrationSite</line>
			<line><tab/><tab/>s[1]: number of nodes in block*/</line>
			<line><tab/></line>
			<line><insertText type="params"/></line>
			<line>}</line>
			<line></line>
			<line>CIntegrationSite<insertText type="typeName"/>::~CIntegrationSite<insertText type="typeName"/>()</line>
			<line>{</line>
			<line></line>
			<line>}</line>
			<line></line>
			<line>void CIntegrationSite<insertText type="typeName"/>::Initialise()</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line><tab/>CIntegrationSiteImpl::Initialise(); /*always call at the end*/</line>
			<line>}</line>
			<line></line>
			<line>void CIntegrationSite<insertText type="typeName"/>::Reset()</line>
			<line>{</line>
			<line><tab/>/*you may delete this function here and in .h file if no *additional* action needs to be taken*/</line>
			<line><tab/>CIntegrationSiteImpl::Reset();</line>
			<line>}</line>
			<line></line>
			<line>bool CIntegrationSite<insertText type="typeName"/>::Integrate(size_t nodes,HBlockOutput&amp; y)</line>
			<line>{</line>
			<line><tab/>/*"nodes" is for constructive versions*/</line>
			<line><tab/>/*insert your code here*/</line>
			<line><tab/>/*return true when integration has converged*/</line>
			<line><tab/>return true;</line>
			<line>}</line>
			<line></line>
			<line>bool CIntegrationSite<insertText type="typeName"/>::Learn(size_t nodes,HBlockOutput&amp; y)</line>
			<line>{</line>
			<line><tab/>/*"nodes" is for constructive versions*/</line>
			<line><tab/>/*insert your code here*/</line>
			<line><tab/>/*return true when last possible node has learned and "nodes" should be increased*/</line>
			<line><tab/>(*pNorm)(mWeights);</line>
			<line><tab/>return false;</line>
			<line>}</line>
			<line></line>
			<line>void CIntegrationSite<insertText type="typeName"/>::SetParam(size_t p,double v)</line>
			<line>{</line>
			<line><insertText type="setParams"/></line>
			<line>}</line>
			<line></line>
			<line>double CIntegrationSite<insertText type="typeName"/>::GetParam(size_t p)</line>
			<line>{</line>
			<line><insertText type="getParams"/></line>
			<line>}</line>
			<line></line>
			<line>SynapseWrapper* CIntegrationSite<insertText type="typeName"/>::GetSynapses()</line>
			<line>{</line>
			<line><tab/>/*derive and use your own SynapseWrapper class or call the base class implementation*/</line>
			<line><tab/>return CIntegrationSiteImpl::GetSynapses();</line>
			<line>}</line>
			<line></line>
			<line>/*macro registers class name, see Factory.h for details*/</line>
			<line>REGISTER_CLASS_1(CIntegrationSite,CIntegrationSite<insertText type="typeName"/>,<insertText type="key"/>)</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
		</cppFile>
	</integrationSite>
	<block>
		<hFile>
			<line>#ifndef CORINET_BLOCK<insertText type="typeNameUpper"/></line>
			<line>#define CORINET_BLOCK<insertText type="typeNameUpper"/></line>
			<line></line>
			<line>#include &lt;Model/Impl/BlockImpl.h&gt;</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>class CBlock<insertText type="typeName"/> : public CBlockImpl {</line>
			<line><tab/><insertText type="params"/></line>
			<line>public:</line>
			<line><tab/>CBlock<insertText type="typeName"/>(size_t*,double*);</line>
			<line><tab/>virtual ~CBlock<insertText type="typeName"/>();</line>
			<line><tab/>void Initialise();</line>
			<line><tab/>void Reset();</line>
			<line><tab/>bool Integrate();</line>
			<line><tab/>void CalculateOutput();</line>
			<line><tab/>bool Learn();</line>
			<line><tab/>void SetParam(size_t,double);</line>
			<line><tab/>double GetParam(size_t);</line>
			<line>};</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
			<line>#endif //CORINET_BLOCK<insertText type="typeNameUpper"/></line>
			<line></line>
		</hFile>
		<cppFile>
			<line></line>
			<line>#include &lt;Util/Factory.h&gt;</line>
			<line>#include &lt;Model/Misc/Nodes.h&gt;</line>
			<line>#include &lt;Model/IntegrationSite.h&gt;</line>
			<line>#include &lt;Model/OutputFunction.h&gt;</line>
			<line>#include "<insertText type="fileName"/>"</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>CBlock<insertText type="typeName"/>::CBlock<insertText type="typeName"/>(size_t* s,double* params)</line>
			<line>{</line>
			<line><tab/>/*parameters available in s:</line>
			<line><tab/><tab/>s[0]: number of nodes in block</line>
			<line><tab/><tab/>s[1]: number of integrationSites in block*/</line>
			<line><tab/></line>
			<line><insertText type="params"/></line>
			<line>}</line>
			<line></line>
			<line>CBlock<insertText type="typeName"/>::~CBlock<insertText type="typeName"/>()</line>
			<line>{</line>
			<line></line>
			<line>}</line>
			<line></line>
			<line>void CBlock<insertText type="typeName"/>::Initialise()</line>
			<line>{</line>
			<line><tab/>/*implement or call base class implementation*/</line>
			<line>}</line>
			<line></line>
			<line>void CBlock<insertText type="typeName"/>::Reset()</line>
			<line>{</line>
			<line><tab/>/*implement or call base class implementation*/</line>
			<line>}</line>
			<line></line>
			<line>bool CBlock<insertText type="typeName"/>::Integrate()</line>
			<line>{</line>
			<line><tab/>/*implement*/</line>
			<line><tab/>/*return true when integration has converged for all integrationSites*/</line>
			<line><tab/>return true;</line>
			<line>}</line>
			<line></line>
			<line>void CBlock<insertText type="typeName"/>::CalculateOutput()</line>
			<line>{</line>
			<line><tab/>/*implement or call base class implementation*/</line>
			<line>}</line>
			<line></line>
			<line>bool CBlock<insertText type="typeName"/>::Learn()</line>
			<line>{</line>
			<line><tab/>/*implement or call base class implementation (does not adjust weights)*/</line>
			<line><tab/>return false;</line>
			<line>}</line>
			<line></line>
			<line>void CBlock<insertText type="typeName"/>::SetParam(size_t p,double v)</line>
			<line>{</line>
			<line><insertText type="setParams"/></line>
			<line>}</line>
			<line></line>
			<line>double CBlock<insertText type="typeName"/>::GetParam(size_t p)</line>
			<line>{</line>
			<line><insertText type="getParams"/></line>
			<line>}</line>
			<line></line>
			<line>/*macro registers class name, see Factory.h for details*/</line>
			<line>REGISTER_CLASS_1(CBlock,CBlock<insertText type="typeName"/>,<insertText type="key"/>)</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
		</cppFile>
	</block>
	<network>
		<hFile>
			<line>#ifndef CORINET_NETWORK<insertText type="typeNameUpper"/></line>
			<line>#define CORINET_NETWORK<insertText type="typeNameUpper"/></line>
			<line></line>
			<line>#include &lt;Model/Impl/NetworkImpl.h&gt;</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>class CNetwork<insertText type="typeName"/> : public CNetworkImpl {</line>
			<line><tab/><insertText type="params"/></line>
			<line>public:</line>
			<line><tab/>CNetwork<insertText type="typeName"/>(size_t*,double*);</line>
			<line><tab/>virtual ~CNetwork<insertText type="typeName"/>();</line>
			<line><tab/>void Initialise();</line>
			<line><tab/>void Finalise();</line>
			<line><tab/>NextStep Reset(double);</line>
			<line><tab/>NextStep SetInput(size_t,SubArrayIteratorConst&amp;,double);</line>
			<line><tab/>NextStep Integrate();</line>
			<line><tab/>void CalculateOutput();</line>
			<line><tab/>NextStep Learn(bool);</line>
			<line><tab/>void SetParam(size_t,double);</line>
			<line><tab/>double GetParam(size_t);</line>
			<line>};</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
			<line>#endif //CORINET_NETWORK<insertText type="typeNameUpper"/></line>
			<line></line>
		</hFile>
		<cppFile>
			<line></line>
			<line>#include &lt;Util/Factory.h&gt;</line>
			<line>#include "<insertText type="fileName"/>"</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>CNetwork<insertText type="typeName"/>::CNetwork<insertText type="typeName"/>(size_t* s,double* params) : CNetworkImpl(s[0],s[1])</line>
			<line>{</line>
			<line><tab/>/*parameters available in s:</line>
			<line><tab/><tab/>s[0]: number of inputs into network</line>
			<line><tab/><tab/>s[1]: number of nodes in network</line>
			<line><tab/><tab/>s[2]: number of blocks in network*/</line>
			<line><tab/></line>
			<line><insertText type="params"/></line>
			<line>}</line>
			<line></line>
			<line>CNetwork<insertText type="typeName"/>::~CNetwork<insertText type="typeName"/>()</line>
			<line>{</line>
			<line></line>
			<line>}</line>
			<line></line>
			<line>void CNetwork<insertText type="typeName"/>::Initialise()</line>
			<line>{</line>
			<line><tab/>/*implement or call base class implementation*/</line>
			<line>}</line>
			<line></line>
			<line>void CNetwork<insertText type="typeName"/>::Finalise()</line>
			<line>{</line>
			<line><tab/>/*implement or call base class implementation*/</line>
			<line>}</line>
			<line></line>
			<line>NextStep CNetwork<insertText type="typeName"/>::Reset(double zeroTime)</line>
			<line>{</line>
			<line><tab/>/*implement or call base class implementation*/</line>
			<line><tab/>return NEXT_ENGINE;</line>
			<line>}</line>
			<line></line>
			<line>NextStep CNetwork<insertText type="typeName"/>::SetInput(size_t startIndex,SubArrayIteratorConst&amp; vals,double timePerPattern)</line>
			<line>{</line>
			<line><tab/>/*implement or call base class implementation*/</line>
			<line><tab/>return NEXT_ENGINE;</line>
			<line>}</line>
			<line></line>
			<line>NextStep CNetwork<insertText type="typeName"/>::Integrate()</line>
			<line>{</line>
			<line><tab/>/*implement*/</line>
			<line><tab/>return NEXT_LEARN;</line>
			<line>}</line>
			<line></line>
			<line>void CNetwork<insertText type="typeName"/>::CalculateOutput()</line>
			<line>{</line>
			<line><tab/>/*implement or call base class implementation*/</line>
			<line>}</line>
			<line></line>
			<line>NextStep CNetwork<insertText type="typeName"/>::Learn(bool train)</line>
			<line>{</line>
			<line><tab/>/*implement*/</line>
			<line><tab/>return NEXT_ENGINE;</line>
			<line>}</line>
			<line></line>
			<line>void CNetwork<insertText type="typeName"/>::SetParam(size_t p,double v)</line>
			<line>{</line>
			<line><insertText type="setParams"/></line>
			<line>}</line>
			<line></line>
			<line>double CNetwork<insertText type="typeName"/>::GetParam(size_t p)</line>
			<line>{</line>
			<line><insertText type="getParams"/></line>
			<line>}</line>
			<line></line>
			<line>/*macro registers class name, see Factory.h for details*/</line>
			<line>REGISTER_CLASS_1(CNetwork,CNetwork<insertText type="typeName"/>,<insertText type="key"/>)</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
		</cppFile>
	</network>
	<dataSource>
		<hFile>
			<line></line>
			<line>Cannot add new datasources yet.</line>
			<line></line>
		</hFile>
		<cppFile>
			<line></line>
			<line>Cannot add new datasources yet.</line>
			<line></line>
		</cppFile>
	</dataSource>
	<insert>
		<hFile>
			<line>#ifndef CORINET_INSERT<insertText type="typeNameUpper"/></line>
			<line>#define CORINET_INSERT<insertText type="typeNameUpper"/></line>
			<line></line>
			<line>#include &lt;Task/Impl/InsertImpl.h&gt;</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>class FInsert<insertText type="typeName"/> : public FInsertImpl {</line>
			<line><tab/><insertText type="params"/></line>
			<line>public:</line>
			<line><tab/>FInsert<insertText type="typeName"/>(size_t*,double*);</line>
			<line><tab/>virtual ~FInsert<insertText type="typeName"/>();</line>
			<line><tab/>void Initialise();</line>
			<line><tab/>void operator()(bool,MatrixIterator*);</line>
			<line><tab/>void Finalise();</line>
			<line><tab/>void SetParam(size_t,double);</line>
			<line><tab/>double GetParam(size_t);</line>
			<line>};</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
			<line>#endif //CORINET_INSERT<insertText type="typeNameUpper"/></line>
			<line></line>
		</hFile>
		<cppFile>
			<line></line>
			<line>#include &lt;Util/Factory.h&gt;</line>
			<line>#include &lt;Util/Iterator.h&gt;</line>
			<line>#include "<insertText type="fileName"/>"</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>FInsert<insertText type="typeName"/>::FInsert<insertText type="typeName"/>(size_t* s,double* params)</line>
			<line>{</line>
			<line><tab/>/*parameters available in s:</line>
			<line><tab/><tab/>s[0]: column in main pattern to insert subpatterns</line>
			<line><tab/><tab/>s[1]: row in main pattern to insert subpatterns*/</line>
			<line><insertText type="params"/></line>
			<line>}</line>
			<line></line>
			<line>FInsert<insertText type="typeName"/>::~FInsert<insertText type="typeName"/>()</line>
			<line>{</line>
			<line></line>
			<line>}</line>
			<line></line>
			<line>void FInsert<insertText type="typeName"/>::Initialise()</line>
			<line>{</line>
			<line><tab/>/*you may delete this function here and in .h file if no action needs to be taken*/</line>
			<line>}</line>
			<line></line>
			<line>void FInsert<insertText type="typeName"/>::operator()(bool randseq,MatrixIterator* pmat)</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line>}</line>
			<line></line>
			<line>void FInsert<insertText type="typeName"/>::Finalise()</line>
			<line>{</line>
			<line><tab/>/*you may delete this function here and in .h file if no action needs to be taken*/</line>
			<line>}</line>
			<line></line>
			<line>void FInsert<insertText type="typeName"/>::SetParam(size_t p,double v)</line>
			<line>{</line>
			<line><insertText type="setParams"/></line>
			<line>}</line>
			<line></line>
			<line>double FInsert<insertText type="typeName"/>::GetParam(size_t p)</line>
			<line>{</line>
			<line><insertText type="getParams"/></line>
			<line>}</line>
			<line></line>
			<line>/*macro registers class name, see Factory.h for details*/</line>
			<line>REGISTER_CLASS_1(FInsert,FInsert<insertText type="typeName"/>,<insertText type="key"/>)</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
		</cppFile>
	</insert>
	<task>
		<hFile>
			<line>#ifndef CORINET_TASK<insertText type="typeNameUpper"/></line>
			<line>#define CORINET_TASK<insertText type="typeNameUpper"/></line>
			<line></line>
			<line>#include &lt;Task/Impl/TaskImpl.h&gt;</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>class CTask<insertText type="typeName"/> : public CTaskSimple {</line>
			<line><tab/><insertText type="params"/></line>
			<line>public:</line>
			<line><tab/>CTask<insertText type="typeName"/>(size_t*,double*);</line>
			<line><tab/>virtual ~CTask<insertText type="typeName"/>();</line>
			<line><tab/>void Initialise();</line>
			<line><tab/>void Finalise();</line>
			<line><tab/>void Generate(bool);</line>
			<line><tab/>void Seed(size_t);</line>
			<line><tab/>void SetParam(size_t,double);</line>
			<line><tab/>double GetParam(size_t);</line>
			<line>};</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
			<line>#endif //CORINET_TASK<insertText type="typeNameUpper"/></line>
			<line></line>
		</hFile>
		<cppFile>
			<line></line>
			<line>#include &lt;Util/Factory.h&gt;</line>
			<line>#include &lt;Common/RandGen.h&gt;</line>
			<line>#include &lt;Common/Attenuation.h&gt;</line>
			<line>#include &lt;Common/NoiseFunction.h&gt;</line>
			<line>#include &lt;Task/DataSource.h&gt;</line>
			<line>#include "<insertText type="fileName"/>"</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>CTask<insertText type="typeName"/>::CTask<insertText type="typeName"/>(size_t* s,double* params) : CTaskSimple(s)</line>
			<line>{</line>
			<line><tab/>/*parameters available in s:</line>
			<line><tab/><tab/>s[0]: number of columns in pattern</line>
			<line><tab/><tab/>s[1]: number of rows in pattern</line>
			<line><tab/><tab/>s[2]: number of patterns that should be stored</line>
			<line><tab/><tab/>s[3]: number of patterns in patternSet or dataSource*/</line>
			<line><tab/><tab/>s[4]: sampleMethod: withoutReplacement = 0, withReplacement = 1</line>
			<line></line>
			<line><tab/></line>
			<line><insertText type="params"/></line>
			<line>}</line>
			<line></line>
			<line>CTask<insertText type="typeName"/>::~CTask<insertText type="typeName"/>()</line>
			<line>{</line>
			<line></line>
			<line>}</line>
			<line></line>
			<line>void CTask<insertText type="typeName"/>::Initialise()</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line><tab/>CTaskSimple::Initialise(); //always call at the end</line>
			<line>}</line>
			<line></line>
			<line>void CTask<insertText type="typeName"/>::Finalise()</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line><tab/>CTaskSimple::Finalise(); //always call at the end</line>
			<line>}</line>
			<line></line>
			<line>void CTask<insertText type="typeName"/>::Generate(bool randseq)</line>
			<line>{</line>
			<line><tab/>if (!Get(randseq)) {</line>
			<line><tab/><tab/>/*generate your pattern here*/</line>
			<line><tab/><tab/>Put(); //always call at the end</line>
			<line><tab/>}</line>
			<line><tab/>if (pAttenuation) (*pAttenuation)(*GetValues());</line>
			<line><tab/>if (pNoise) (*pNoise)(*GetValues());</line>
			<line>}</line>
			<line></line>
			<line>void CTask<insertText type="typeName"/>::Seed(size_t s)</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line><tab/>CTaskSimple::Seed(s); //always call at the end</line>
			<line>}</line>
			<line></line>
			<line>void CTask<insertText type="typeName"/>::SetParam(size_t p,double v)</line>
			<line>{</line>
			<line><insertText type="setParams"/></line>
			<line>}</line>
			<line></line>
			<line>double CTask<insertText type="typeName"/>::GetParam(size_t p)</line>
			<line>{</line>
			<line><insertText type="getParams"/></line>
			<line>}</line>
			<line></line>
			<line>/*macro registers class name, see Factory.h for details*/</line>
			<line>REGISTER_CLASS_1(CTask,CTask<insertText type="typeName"/>,<insertText type="key"/>)</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
		</cppFile>
	</task>
	<compositeTask>
		<hFile>
			<line>#ifndef CORINET_TASK<insertText type="typeNameUpper"/></line>
			<line>#define CORINET_TASK<insertText type="typeNameUpper"/></line>
			<line></line>
			<line>#include &lt;Task/Impl/TaskImpl.h&gt;</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>class CTask<insertText type="typeName"/> : public CTaskComposite {</line>
			<line><tab/><insertText type="params"/></line>
			<line>public:</line>
			<line><tab/>CTask<insertText type="typeName"/>(size_t*,double*);</line>
			<line><tab/>virtual ~CTask<insertText type="typeName"/>();</line>
			<line><tab/>void Initialise();</line>
			<line><tab/>void Finalise();</line>
			<line><tab/>void Generate(bool);</line>
			<line><tab/>void Seed(size_t);</line>
			<line><tab/>void SetParam(size_t,double);</line>
			<line><tab/>double GetParam(size_t);</line>
			<line>};</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
			<line>#endif //CORINET_TASK<insertText type="typeNameUpper"/></line>
			<line></line>
		</hFile>
		<cppFile>
			<line></line>
			<line>#include &lt;Util/Factory.h&gt;</line>
			<line>#include &lt;Common/RandGen.h&gt;</line>
			<line>#include &lt;Common/Attenuation.h&gt;</line>
			<line>#include &lt;Common/NoiseFunction.h&gt;</line>
			<line>#include &lt;Task/Insert.h&gt;</line>
			<line>#include "<insertText type="fileName"/>"</line>
			<line></line>
			<line>namespace CORINET {</line>
			<line></line>
			<line>CTask<insertText type="typeName"/>::CTask<insertText type="typeName"/>(size_t* s,double* params) : CTaskComposite(s)</line>
			<line>{</line>
			<line><tab/>/*parameters available in s:</line>
			<line><tab/><tab/>s[0]: number of columns in pattern</line>
			<line><tab/><tab/>s[1]: number of rows in pattern</line>
			<line><tab/><tab/>s[2]: number of patterns that should be stored</line>
			<line><tab/><tab/>s[4]: sampleMethod: withoutReplacement = 0, withReplacement = 1*/</line>
			<line></line>
			<line><tab/></line>
			<line><insertText type="params"/></line>
			<line>}</line>
			<line></line>
			<line>CTask<insertText type="typeName"/>::~CTask<insertText type="typeName"/>()</line>
			<line>{</line>
			<line></line>
			<line>}</line>
			<line></line>
			<line>void CTask<insertText type="typeName"/>::Initialise()</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line><tab/>CTaskComposite::Initialise(); //always call at the end</line>
			<line>}</line>
			<line></line>
			<line>void CTask<insertText type="typeName"/>::Finalise()</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line><tab/>CTaskComposite::Finalise(); //always call at the end</line>
			<line>}</line>
			<line></line>
			<line>void CTask<insertText type="typeName"/>::Generate(bool randseq)</line>
			<line>{</line>
			<line><tab/>if (!Get(randseq)) {</line>
			<line><tab/><tab/>/*generate your pattern here*/</line>
			<line><tab/><tab/>Put(); //always call at the end</line>
			<line><tab/>}</line>
			<line><tab/>if (pAttenuation) (*pAttenuation)(*GetValues());</line>
			<line><tab/>if (pNoise) (*pNoise)(*GetValues());</line>
			<line>}</line>
			<line></line>
			<line>void CTask<insertText type="typeName"/>::Seed(size_t s)</line>
			<line>{</line>
			<line><tab/>/*insert your code here*/</line>
			<line><tab/>CTaskComposite::Seed(s); //always call at the end</line>
			<line>}</line>
			<line></line>
			<line>void CTask<insertText type="typeName"/>::SetParam(size_t p,double v)</line>
			<line>{</line>
			<line><insertText type="setParams"/></line>
			<line>}</line>
			<line></line>
			<line>double CTask<insertText type="typeName"/>::GetParam(size_t p)</line>
			<line>{</line>
			<line><insertText type="getParams"/></line>
			<line>}</line>
			<line></line>
			<line>/*macro registers class name, see Factory.h for details*/</line>
			<line>REGISTER_CLASS_1(CTask,CTask<insertText type="typeName"/>,<insertText type="key"/>)</line>
			<line></line>
			<line>} //end namespace CORINET</line>
			<line></line>
		</cppFile>
	</compositeTask>
</codeGenerator>
