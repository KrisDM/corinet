/*********************************************************************************************
 * Name      :  InsertImpl.h
 *
 * Purpose   :  Implementation class of inserts. They are part of composite tasks, basically
 *				wrap around a simple task and insert the pattern generated by the simple
 *				task into the pattern of the composite task.
 *
 * Notes	 :	
 *
 * Info      :	http://www.corinet.org
 *
 * Copyright :	2006, King's College London
 *		
 * License   :  This program is free software; you can redistribute it and/or modify
 *				it under the terms of the GNU General Public License as published by
 *				the Free Software Foundation; either version 2 of the License, or
 *				(at your option) any later version.
 *
 *				This program is distributed in the hope that it will be useful,
 *				but WITHOUT ANY WARRANTY; without even the implied warranty of
 *				MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *				GNU General Public License in $CORINETROOT/licenses for more details.
 *
 **********************************************************************************************/

#ifndef CORINET_INSERTIMPL
#define CORINET_INSERTIMPL

#include <Task/Insert.h>
#include <vector>

namespace CORINET {
	class CTaskSimple;

class FInsertImpl : public FInsert {
protected:
	size_t mInColumn;
	size_t mInRow;
	std::vector<CTaskSimple*> mTasks;
public:
	FInsertImpl(size_t,size_t);
	virtual ~FInsertImpl();

	void Initialise();
	void Finalise();

	void AddTask(CTaskSimple*);
};

} //end namespace CORINET

#endif //CORINET_INSERTIMPL
