/*********************************************************************************************
 * Name      :  InsertImpl.cpp
 *
 * Purpose   :  Implementation class of inserts. They are part of composite tasks, basically
 *				wrap around simple tasks and insert the pattern generated by the simple
 *				task into the pattern of the composite task.
 *
 * Notes	 :	
 *
 * Info      :	http://www.corinet.org
 *
 * Copyright :	2006, King's College London
 *		
 * License   :  This program is free software; you can redistribute it and/or modify
 *				it under the terms of the GNU General Public License as published by
 *				the Free Software Foundation; either version 2 of the License, or
 *				(at your option) any later version.
 *
 *				This program is distributed in the hope that it will be useful,
 *				but WITHOUT ANY WARRANTY; without even the implied warranty of
 *				MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *				GNU General Public License in $CORINETROOT/licenses for more details.
 *
 **********************************************************************************************/

#include "InsertImpl.h"
#include "TaskImpl.h"

namespace CORINET {

FInsertImpl::FInsertImpl(size_t col,size_t row) : mInColumn(col),mInRow(row),mTasks()
{

}

FInsertImpl::~FInsertImpl()
{

}

void FInsertImpl::Initialise()
{
	const size_t s = mTasks.size();
	for(size_t i=0;i<s;++i) {
		mTasks[i]->Initialise();
	}
}
	
void FInsertImpl::Finalise()
{
	const size_t s = mTasks.size();
	for(size_t i=0;i<s;++i) {
		mTasks[i]->Finalise();
	}
}

void FInsertImpl::AddTask(CTaskSimple* pt)
{
	mTasks.push_back(pt);
}

} //end namespace CORINET

